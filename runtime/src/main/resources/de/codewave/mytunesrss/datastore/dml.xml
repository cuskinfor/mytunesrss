<?xml version="1.0" encoding="UTF-8"?>

<statements>
    <statement name="findAlbums">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT a.name AS albumname, track_count AS track_count, artist_count AS artist_count, a.artist AS artist, COUNT(i.track_id) AS imagecount
            FROM album a
                INNER JOIN track t ON a.name = t.album
                LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE ((:artist IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:artist IS NOT NULL AND a.name IN (SELECT DISTINCT(album) FROM track WHERE LOWER(artist) = LOWER(:artist)))
            OR (:genre IS NOT NULL AND a.name IN (SELECT DISTINCT(album) FROM track WHERE LOWER(genre) = LOWER(:genre)))
            OR {letterRegionByIndex})
            AND (:filter IS NULL OR LOWER(a.name) LIKE :filter)
            GROUP BY a.name, a.track_count, a.artist_count, a.artist
            ORDER BY albumname
            ]]>
        </sql>
    </statement>

    <statement name="findAlbumsRestricted">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT a.name AS albumname, a.track_count AS track_count, a.artist_count AS artist_count, a.artist AS artist, COUNT(i.track_id) AS imagecount
            FROM album a, link_track_playlist rltp, track t
                LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE ((:artist IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:artist IS NOT NULL AND a.name IN (SELECT DISTINCT(album) FROM track WHERE LOWER(artist) = LOWER(:artist)))
            OR (:genre IS NOT NULL AND a.name IN (SELECT DISTINCT(album) FROM track WHERE LOWER(genre) = LOWER(:genre)))
            OR {letterRegionByIndex})
            AND (:filter IS NULL OR LOWER(a.name) LIKE :filter)
            AND rltp.playlist_id = :restrictedPlaylistId
            AND rltp.track_id = t.id
            AND t.album = a.name
            GROUP BY a.name, a.track_count, a.artist_count, a.artist
            ORDER BY albumname
            ]]>
        </sql>
    </statement>

    <statement name="findArtists">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, album_count AS album_count
            FROM artist
            WHERE ((:album IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:album IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE LOWER(album) = LOWER(:album)))
            OR (:genre IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE LOWER(genre) = LOWER(:genre)))
            OR {letterRegionByIndex})
            AND (:filter IS NULL OR LOWER(name) LIKE :filter)
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findArtistsRestricted">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT a.name AS name, a.track_count AS track_count, a.album_count AS album_count
            FROM artist a, link_track_playlist rltp, track t
            WHERE ((:album IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:album IS NOT NULL AND a.name IN (SELECT DISTINCT(artist) FROM track WHERE LOWER(album) = LOWER(:album)))
            OR (:genre IS NOT NULL AND a.name IN (SELECT DISTINCT(artist) FROM track WHERE LOWER(genre) = LOWER(:genre)))
            OR {letterRegionByIndex})
            AND rltp.playlist_id = :restrictedPlaylistId
            AND rltp.track_id = t.id
            AND t.artist = a.name
            AND (:filter IS NULL OR LOWER(a.name) LIKE :filter)
            GROUP BY a.name, a.track_count, a.album_count
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findArtistTrackCount">
        <sql>
            SELECT track_count AS count FROM artist WHERE LOWER(name) = LOWER(:name)
        </sql>
    </statement>

    <statement name="findGenreTrackCount">
        <sql>
            SELECT track_count AS count FROM genre WHERE LOWER(name) = LOWER(:name)
        </sql>
    </statement>

    <statement name="findGenres">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, artist_count AS artist_count, album_count AS album_count
            FROM genre
            WHERE (:index < 0 OR :index > 8)
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findGenresRestricted">
        <parameter name="index" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT g.name AS name, g.track_count AS track_count, g.artist_count AS artist_count, g.album_count AS album_count
            FROM genre g, link_track_playlist rltp, track t
            WHERE ((:index < 0 OR :index > 8) OR {letterRegionByIndex})
            AND rltp.playlist_id = :restrictedPlaylistId
            AND rltp.track_id = t.id
            AND t.genre = g.name
            GROUP BY g.name, g.track_count, g.artist_count, g.album_count
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylists">
        <sql>
            <![CDATA[
            SELECT id AS id, name AS name, type AS type, track_count AS track_count, user_private AS user_private, hidden AS hidden, user_owner AS user_owner
            FROM playlist
            WHERE (hidden IS NULL OR :includeHidden = TRUE OR hidden = FALSE)
            AND (user_private IS NULL OR user_private = FALSE OR :username IS NULL OR user_owner = :username)
            AND ((:type IS NULL AND :id IS NULL AND track_count > 0)
            OR (:type IS NOT NULL AND :id IS NULL AND track_count > 0 AND type = :type)
            OR (:type IS NULL AND :id IS NOT NULL AND track_count > 0 AND id = :id)
            OR (:type IS NOT NULL AND :id IS NOT NULL AND track_count > 0 AND type = :type AND id = :id))
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findUserPlaylists">
        <sql>
            <![CDATA[
            SELECT id AS id, name AS name, type AS type, track_count AS track_count, user_private AS user_private, hidden AS hidden, user_owner AS user_owner
            FROM playlist
            WHERE (hidden IS NULL OR :includeHidden = TRUE OR hidden = FALSE)
            AND user_owner = :username
            AND ((:type IS NULL AND :id IS NULL AND track_count > 0)
            OR (:type IS NOT NULL AND :id IS NULL AND track_count > 0 AND type = :type)
            OR (:type IS NULL AND :id IS NOT NULL AND track_count > 0 AND id = :id)
            OR (:type IS NOT NULL AND :id IS NOT NULL AND track_count > 0 AND type = :type AND id = :id))
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistsRestricted">
        <sql>
            <![CDATA[
            SELECT p.id AS id, p.name AS name, p.type AS type, p.track_count AS track_count, user_private AS user_private, hidden AS hidden, user_owner AS user_owner
            FROM playlist p, link_track_playlist rltp, link_track_playlist ltp
            WHERE (hidden IS NULL OR :includeHidden = TRUE OR hidden = FALSE)
            AND (user_private IS NULL OR user_private = FALSE OR :username IS NULL OR user_owner = :username)
            AND rltp.playlist_id = :restrictionPlaylistId
            AND ltp.track_id = rltp.track_id
            AND ltp.playlist_id = p.id
            AND ((:type IS NULL AND :id IS NULL AND p.track_count > 0)
            OR (:type IS NOT NULL AND :id IS NULL AND p.track_count > 0 AND p.type = :type)
            OR (:type IS NULL AND :id IS NOT NULL AND p.track_count > 0 AND p.id = :id)
            OR (:type IS NOT NULL AND :id IS NOT NULL AND p.track_count > 0 AND p.type = :type AND p.id = :id))
            GROUP BY id, name, type, track_count, user_private, hidden, user_owner
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByIndex">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT ltp.idx AS idx, {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY idx, {groupByTrackColumns}
            ORDER BY idx
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByIndexRestricted">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT ltp.idx AS idx, {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND rltp.playlist_id = :restrictedPlaylistId
            AND t.id = rltp.track_id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY ltp.idx, {groupByTrackColumns}
            ORDER BY idx
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByAlbum">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY {groupByTrackColumns}
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByAlbumRestricted">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND rltp.playlist_id = :restrictedPlaylistId
            AND t.id = rltp.track_id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY {groupByTrackColumns}
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByArtist">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY {groupByTrackColumns}
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByArtistRestricted">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist ltp, link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND rltp.playlist_id = :restrictedPlaylistId
            AND t.id = rltp.track_id
            AND (:firstIndex = -1 OR ltp.idx >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.idx <= :lastIndex)
            GROUP BY {groupByTrackColumns}
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByAlbum">
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            GROUP BY {groupByTrackColumns}
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByAlbumRestricted">
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE rltp.playlist_id = :restrictedPlaylistId
            AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByArtist">
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            GROUP BY {groupByTrackColumns}
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByArtistRestricted">
        <sql>
            <![CDATA[
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE rltp.playlist_id = :restrictedPlaylistId
            AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="updatePlayCountAndDate">
        <sql>
            UPDATE track SET playcount = playcount + 1, ts_played = :ts_played WHERE id IN (:id[])
        </sql>
    </statement>

    <statement name="findTracks">
      <sql>
        {findTracksQuery}
        ORDER BY album, track_number, name
      </sql>
    </statement>

    <statement name="findAllTracksForImageUpdate">
        <sql>
            SELECT id AS id, file AS file, last_image_update AS last_image_update FROM track WHERE last_image_update IS NULL OR last_image_update &lt; :timeUpdateStart
        </sql>
    </statement>

    <statement name="findTracksRestricted">
      <sql>
        {findTracksQueryRestricted}
        ORDER BY album, track_number, name
      </sql>
    </statement>

    <statement name="findTracksWithArtistOrder">
      <sql>
        {findTracksQuery}
        ORDER BY artist, album, track_number, name
      </sql>
    </statement>

    <statement name="findTracksWithArtistOrderRestricted">
      <sql>
        {findTracksQueryRestricted}
        ORDER BY artist, album, track_number, name
      </sql>
    </statement>

    <statement name="deletePlaylistById">
        <sql>
            DELETE FROM link_track_playlist WHERE playlist_id = :id
        </sql>
        <sql>
            DELETE FROM playlist WHERE id = :id
        </sql>
    </statement>

    <statement name="deleteOrphanedImages">
        <sql>
            DELETE FROM image WHERE NOT EXISTS ( SELECT * FROM track t WHERE t.id = track_id )
        </sql>
    </statement>

    <statement name="findTrackIdsForSource">
        <sql>
            SELECT id AS id FROM track WHERE source = :source
        </sql>
    </statement>

    <statement name="getSystemInformation">
        <sql>
            SELECT lastupdate AS lastupdate, version AS version, track_count AS track_count, album_count AS album_count,
            artist_count AS artist_count, genre_count AS genre_count
            FROM system_information
        </sql>
    </statement>

    <statement name="initializeAllTables">
        <sql>INSERT INTO system_information (version) VALUES (:version)</sql>
    </statement>

    <statement name="updateDatabaseVersion">
        <sql>UPDATE system_information SET version = :version</sql>
    </statement>

    <statement name="insertImage">
        <sql>
            INSERT INTO image (track_id, size, data) VALUES (:track_id, :size, :data)
        </sql>
    </statement>

    <statement name="updateImage">
        <sql>
            UPDATE image SET data = :data WHERE track_id = :track_id AND size = :size
        </sql>
    </statement>

    <statement name="updateLastImageUpdateTime">
        <sql>
            UPDATE track SET last_image_update = :updateTime WHERE id = :track_id
        </sql>
    </statement>

    <statement name="getTrackIds">
        <sql>
            SELECT id AS id FROM track
        </sql>
    </statement>

    <statement name="removeTrack">
        <sql>DELETE FROM track WHERE id = :track_id</sql>
    </statement>

    <statement name="deleteImage">
        <sql>
            DELETE FROM image WHERE track_id = :track_id
        </sql>
    </statement>

    <statement name="findTrackImage">
        <sql>
            SELECT data AS data FROM image WHERE track_id = :track_id AND size = :size
        </sql>
    </statement>

    <statement name="insertTrack">
        <parameter name="time" type="java.lang.Integer"/>
        <parameter name="track_number" type="java.lang.Integer"/>
        <parameter name="protected" type="java.lang.Boolean"/>
        <parameter name="video" type="java.lang.Boolean"/>
        <sql>
            INSERT INTO track (id, name, artist, album, time, track_number, file, protected, video, source, genre, suffix, mp4codec, ts_updated, playcount, last_image_update, comment)
            VALUES (:id, :name, :artist, :album, :time, :track_number, :file, :protected, :video, :source, :genre, :suffix, :mp4codec, :ts_updated, 0, 0, :comment)
        </sql>
    </statement>

    <statement name="updateTrack">
        <parameter name="time" type="java.lang.Integer"/>
        <parameter name="track_number" type="java.lang.Integer"/>
        <parameter name="protected" type="java.lang.Boolean"/>
        <parameter name="video" type="java.lang.Boolean"/>
        <sql>
            UPDATE track SET name = :name, album = :album, artist = :artist, time = :time, track_number = :track_number,
                             file = :file, protected = :protected, video = :video, genre = :genre, suffix = :suffix, mp4codec = :mp4codec,
                             ts_updated = :ts_updated, comment = :comment
            WHERE id = :id
        </sql>
    </statement>

    <statement name="insertPlaylist">
        <sql>INSERT INTO playlist (id, name, type, track_count, hidden, user_private, user_owner) VALUES (:id, :name, :type, 0, FALSE, :user_private, :user_name)</sql>
        <sql loop="track_id" loopcommit="500">{createPlaylistTrackLinks}</sql>
        <sql>{updatePlaylistCount}</sql>
    </statement>

    <statement name="updatePlaylist">
        <sql>UPDATE playlist SET name = :name, user_private = :user_private WHERE id = :id</sql>
        <sql>DELETE FROM link_track_playlist WHERE playlist_id = :id</sql>
        <sql loop="track_id" loopcommit="500">{createPlaylistTrackLinks}</sql>
        <sql>{updatePlaylistCount}</sql>
    </statement>

    <statement name="updatePlaylistAttributes">
        <sql>UPDATE playlist SET name = :name, hidden = :hidden, user_owner = :user_owner, user_private = :user_private WHERE id = :id</sql>
    </statement>

    <statement name="recreateHelpTablesAlbum">
        <sql>DELETE FROM album</sql>
        <sql>
            INSERT INTO album (name, first_char, artist, track_count, artist_count)
            SELECT MAX(album), SUBSTRING(LOWER(MAX(album)) FROM 1 FOR 1), MAX(artist), COUNT(id), COUNT(DISTINCT(LOWER(artist))) FROM track GROUP BY LOWER(album)
        </sql>
    </statement>

    <statement name="recreateHelpTablesArtist">
        <sql>DELETE FROM artist</sql>
        <sql>
            INSERT INTO artist (name, first_char, track_count, album_count)
            SELECT MAX(artist), SUBSTRING(LOWER(MAX(artist)) FROM 1 FOR 1), COUNT(id), COUNT(DISTINCT(LOWER(album))) FROM track GROUP BY LOWER(artist)
        </sql>
    </statement>

    <statement name="recreateHelpTablesGenre">
        <sql>DELETE FROM genre</sql>
        <sql>
            INSERT INTO genre (name, first_char, track_count, album_count, artist_count)
            SELECT MAX(genre), SUBSTRING(MAX(genre) FROM 1 FOR 1), COUNT(id), COUNT(DISTINCT(LOWER(album))), COUNT(DISTINCT(LOWER(artist))) FROM track WHERE genre IS NOT NULL GROUP BY LOWER(genre)
        </sql>
    </statement>

    <statement name="findPlaylistIds">
        <sql>SELECT id AS id FROM playlist WHERE type IN (:types[])</sql>
    </statement>

    <statement name="updateStatistics">
        <sql>UPDATE system_information SET track_count = (SELECT COUNT(id) FROM track)</sql>
        <sql>UPDATE system_information SET album_count = (SELECT COUNT(name) FROM album)</sql>
        <sql>UPDATE system_information SET artist_count = (SELECT COUNT(name) FROM artist)</sql>
        <sql>UPDATE system_information SET genre_count = (SELECT COUNT(name) FROM genre)</sql>
    </statement>

    <!-- reusable sql fragments -->
    <fragment name="letterRegionByIndex">
        <![CDATA[
        (:index = 0 AND (first_char < 'a' OR first_char > 'z'))
        OR (:index = 1 AND first_char >= 'a' AND first_char < 'd')
        OR (:index = 2 AND first_char >= 'd' AND first_char < 'g')
        OR (:index = 3 AND first_char >= 'g' AND first_char < 'j')
        OR (:index = 4 AND first_char >= 'j' AND first_char < 'm')
        OR (:index = 5 AND first_char >= 'm' AND first_char < 'p')
        OR (:index = 6 AND first_char >= 'p' AND first_char < 't')
        OR (:index = 7 AND first_char >= 't' AND first_char < 'w')
        OR (:index = 8 AND first_char >= 'w' AND first_char <= 'z')
        ]]>
    </fragment>

    <fragment name="trackColumns">
        t.id AS id, t.name AS name, t.artist AS artist, t.album AS album, t.time AS time, t.track_number AS track_number, t.file AS file,
        t.protected AS protected, t.video AS video, t.genre AS genre, t.mp4codec AS mp4codec, t.ts_played AS ts_played, t.ts_updated AS ts_updated,
        t.playcount AS playcount, t.last_image_update AS last_image_update, t.comment AS comment
    </fragment>

    <fragment name="groupByTrackColumns">
        id, name, artist, album, time, track_number, file, protected, video, genre, mp4codec, ts_played, ts_updated, playcount, last_image_update, comment
    </fragment>

    <fragment name="updatePlaylistCount">
        UPDATE playlist
        SET track_count = (SELECT COUNT(*) FROM link_track_playlist WHERE playlist_id = :id)
        WHERE id = :id
    </fragment>

    <fragment name="createPlaylistTrackLinks">
        INSERT INTO link_track_playlist (idx, playlist_id, track_id) VALUES (:loopindex_track_id, :id, :loopitem_track_id)
    </fragment>

    <fragment name="findTracksQuery">
        <![CDATA[
        SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
        FROM track t
        LEFT OUTER JOIN image i ON i.track_id = t.id
        WHERE (:size_of_id = 0 OR t.id IN (:id[]))
        AND (:size_of_genre = 0 OR LOWER(t.genre) IN (:genre[]))
        AND (:size_of_artist = 0 OR LOWER(t.artist) IN (:artist[]))
        AND (:size_of_album = 0 OR LOWER(t.album) IN (:album[]))
        AND (:size_of_search < 1 OR (LOWER(t.name) LIKE :search[0] {likeEscape}) OR (LOWER(album) LIKE :search[0] {likeEscape}) OR (LOWER(artist) LIKE :search[0] {likeEscape}))
        AND (:size_of_search < 2 OR (LOWER(t.name) LIKE :search[1] {likeEscape}) OR (LOWER(album) LIKE :search[1] {likeEscape}) OR (LOWER(artist) LIKE :search[1] {likeEscape}))
        AND (:size_of_search < 3 OR (LOWER(t.name) LIKE :search[2] {likeEscape}) OR (LOWER(album) LIKE :search[2] {likeEscape}) OR (LOWER(artist) LIKE :search[2] {likeEscape}))
        AND (:size_of_search < 4 OR (LOWER(t.name) LIKE :search[3] {likeEscape}) OR (LOWER(album) LIKE :search[3] {likeEscape}) OR (LOWER(artist) LIKE :search[3] {likeEscape}))
        AND (:size_of_search < 5 OR (LOWER(t.name) LIKE :search[4] {likeEscape}) OR (LOWER(album) LIKE :search[4] {likeEscape}) OR (LOWER(artist) LIKE :search[4] {likeEscape}))
        AND (:size_of_search < 6 OR (LOWER(t.name) LIKE :search[5] {likeEscape}) OR (LOWER(album) LIKE :search[5] {likeEscape}) OR (LOWER(artist) LIKE :search[5] {likeEscape}))
        AND (:size_of_search < 7 OR (LOWER(t.name) LIKE :search[6] {likeEscape}) OR (LOWER(album) LIKE :search[6] {likeEscape}) OR (LOWER(artist) LIKE :search[6] {likeEscape}))
        AND (:size_of_search < 8 OR (LOWER(t.name) LIKE :search[7] {likeEscape}) OR (LOWER(album) LIKE :search[7] {likeEscape}) OR (LOWER(artist) LIKE :search[7] {likeEscape}))
        AND (:size_of_search < 9 OR (LOWER(t.name) LIKE :search[8] {likeEscape}) OR (LOWER(album) LIKE :search[8] {likeEscape}) OR (LOWER(artist) LIKE :search[8] {likeEscape}))
        AND (:size_of_search < 10 OR (LOWER(t.name) LIKE :search[9] {likeEscape}) OR (LOWER(album) LIKE :search[9] {likeEscape}) OR (LOWER(artist) LIKE :search[9] {likeEscape}))
        GROUP BY {groupByTrackColumns}
        ]]>
    </fragment>

    <fragment name="findTracksQueryRestricted">
        <![CDATA[
        SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
        FROM link_track_playlist rltp, track t
        LEFT OUTER JOIN image i ON i.track_id = t.id
        WHERE rltp.playlist_id = :restrictedPlaylistId
        AND rltp.track_id = t.id
        AND (:size_of_id = 0 OR t.id IN (:id[]))
        AND (:size_of_genre = 0 OR LOWER(t.genre) IN (:genre[]))
        AND (:size_of_artist = 0 OR LOWER(t.artist) IN (:artist[]))
        AND (:size_of_album = 0 OR LOWER(t.album) IN (:album[]))
        AND (:size_of_search < 1 OR (LOWER(t.name) LIKE :search[0] {likeEscape}) OR (LOWER(album) LIKE :search[0] {likeEscape}) OR (LOWER(artist) LIKE :search[0] {likeEscape}))
        AND (:size_of_search < 2 OR (LOWER(t.name) LIKE :search[1] {likeEscape}) OR (LOWER(album) LIKE :search[1] {likeEscape}) OR (LOWER(artist) LIKE :search[1] {likeEscape}))
        AND (:size_of_search < 3 OR (LOWER(t.name) LIKE :search[2] {likeEscape}) OR (LOWER(album) LIKE :search[2] {likeEscape}) OR (LOWER(artist) LIKE :search[2] {likeEscape}))
        AND (:size_of_search < 4 OR (LOWER(t.name) LIKE :search[3] {likeEscape}) OR (LOWER(album) LIKE :search[3] {likeEscape}) OR (LOWER(artist) LIKE :search[3] {likeEscape}))
        AND (:size_of_search < 5 OR (LOWER(t.name) LIKE :search[4] {likeEscape}) OR (LOWER(album) LIKE :search[4] {likeEscape}) OR (LOWER(artist) LIKE :search[4] {likeEscape}))
        AND (:size_of_search < 6 OR (LOWER(t.name) LIKE :search[5] {likeEscape}) OR (LOWER(album) LIKE :search[5] {likeEscape}) OR (LOWER(artist) LIKE :search[5] {likeEscape}))
        AND (:size_of_search < 7 OR (LOWER(t.name) LIKE :search[6] {likeEscape}) OR (LOWER(album) LIKE :search[6] {likeEscape}) OR (LOWER(artist) LIKE :search[6] {likeEscape}))
        AND (:size_of_search < 8 OR (LOWER(t.name) LIKE :search[7] {likeEscape}) OR (LOWER(album) LIKE :search[7] {likeEscape}) OR (LOWER(artist) LIKE :search[7] {likeEscape}))
        AND (:size_of_search < 9 OR (LOWER(t.name) LIKE :search[8] {likeEscape}) OR (LOWER(album) LIKE :search[8] {likeEscape}) OR (LOWER(artist) LIKE :search[8] {likeEscape}))
        AND (:size_of_search < 10 OR (LOWER(t.name) LIKE :search[9] {likeEscape}) OR (LOWER(album) LIKE :search[9] {likeEscape}) OR (LOWER(artist) LIKE :search[9] {likeEscape}))
        GROUP BY {groupByTrackColumns}
        ]]>
    </fragment>

</statements>