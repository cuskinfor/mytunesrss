<?xml version="1.0" encoding="UTF-8"?>

<statements>

    <statement name="findRandomTracks">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
            ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)) GROUP BY {groupByTrackColumns}
            ORDER BY RAND() LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findLastUpdatedTracks">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
            ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)) GROUP BY {groupByTrackColumns}
            ORDER BY ts_updated DESC LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findMostPlayedTracks">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
            ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)) GROUP BY {groupByTrackColumns}
            ORDER BY playcount DESC LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findRandomTracksRestricted">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
                ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY RAND() LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findLastUpdatedTracksRestricted">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
                ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY ts_updated DESC LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findMostPlayedTracksRestricted">
        <sql>
            SELECT {trackColumns}, COUNT(i.track_id) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.track_id = t.id
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM link_track_playlist ltp WHERE
                ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY playcount DESC LIMIT :maxCount
        </sql>
    </statement>

    <statement name="findAlbumImage">
        <sql>
            SELECT data AS data FROM image i, track t WHERE t.album = :album AND i.track_id = t.id AND i.size = :size LIMIT 1
        </sql>
    </statement>

    <statement name="nextPlaylistId">
        <sql>INSERT INTO playlist_id_sequence VALUES (0)</sql>
        <sql>DELETE FROM playlist_id_sequence WHERE id = LAST_INSERT_ID()</sql>
        <sql>SELECT LAST_INSERT_ID() AS id FROM playlist_id_sequence LIMIT 1</sql>
    </statement>

    <statement name="tuneDatabase">
        <sql>ANALYZE TABLE track, artist, album, genre</sql>
    </statement>

    <!-- reusable sql fragments -->

    <fragment name="likeEscape">ESCAPE '\\'</fragment>

    <fragment name="updateArtistNameInAlbumTable">
        UPDATE album AS a, track AS t SET a.artist = t.artist WHERE a.artist_count = 1 AND t.album = a.name
    </fragment>

    <fragment name="updateAlbumNameInAlbumTable">
        UPDATE album AS a, track AS t SET a.name = t.album WHERE a.name = LOWER(t.album)
    </fragment>

    <fragment name="updateArtistNameInArtistTable">
        UPDATE artist AS a, track AS t SET a.name = t.artist WHERE a.name = LOWER(t.artist)
    </fragment>

    <fragment name="updateGenreNameInGenreTable">
        UPDATE genre AS g, track AS t SET g.name = t.genre WHERE g.name = LOWER(t.genre)
    </fragment>

</statements>