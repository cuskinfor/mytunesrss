<?xml version="1.0" encoding="UTF-8"?>

<statements>

    <statement name="findRandomTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND (t.video = :video OR NOT t.video = :audio)
            AND (NOT t.protected OR t.protected = :protected)
            GROUP BY {groupByTrackColumns}
            ORDER BY RAND()
        </sql>
    </statement>

    <statement name="findLastUpdatedTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            GROUP BY {groupByTrackColumns}
            ORDER BY ts_updated DESC
        </sql>
    </statement>

    <statement name="findMostPlayedTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            GROUP BY {groupByTrackColumns}
            ORDER BY playcount DESC
        </sql>
    </statement>

    <statement name="findRandomTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            AND (t.video = :video OR NOT t.video = :audio)
            AND (NOT t.protected OR t.protected = :protected)
            GROUP BY {groupByTrackColumns}
            ORDER BY RAND()
        </sql>
    </statement>
    <statement name="findLastUpdatedTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY ts_updated DESC
        </sql>
    </statement>

    <statement name="findMostPlayedTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}, COUNT(i.hash) AS imagecount
            FROM link_track_playlist rltp, track t
            LEFT OUTER JOIN image i ON i.hash = t.image_hash
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            GROUP BY {groupByTrackColumns}
            ORDER BY playcount DESC
        </sql>
    </statement>

    <statement name="findAlbumImage">
        <sql>
            SELECT LIMIT 0 1 data AS data
            FROM image i, track t
            WHERE t.album = :album
            AND i.hash = t.image_hash
            AND i.size = :size
        </sql>
    </statement>

    <statement name="nextPlaylistId">
        <sql>SELECT TOP 1 NEXT VALUE FOR playlist_id_sequence AS id FROM system_information</sql>
    </statement>

    <statement name="tuneDatabase">
        <sql>ANALYZE SAMPLE_SIZE 0</sql>
    </statement>

    <!-- reusable sql fragments -->

    <fragment name="likeEscape">ESCAPE '\'</fragment>

</statements>