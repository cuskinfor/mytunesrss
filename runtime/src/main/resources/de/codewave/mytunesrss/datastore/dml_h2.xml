<?xml version="1.0" encoding="UTF-8"?>

<statements>

    <statement name="findRandomTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM track t
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND (:mediatype IS NULL OR t.mediatype = :mediatype)
            AND (NOT t.protected OR t.protected = :protected)
            ORDER BY RAND()
        </sql>
    </statement>

    <statement name="findLastUpdatedTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM track t
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            ORDER BY ts_updated DESC
        </sql>
    </statement>

    <statement name="findMostPlayedTracks">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM track t
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            ORDER BY playcount DESC
        </sql>
    </statement>

    <statement name="findRandomTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM link_track_playlist rltp, track t
            WHERE (:sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId))
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            AND (:mediatype IS NULL OR t.mediatype = :mediatype)
            AND (NOT t.protected OR t.protected = :protected)
            ORDER BY RAND()
        </sql>
    </statement>
    <statement name="findLastUpdatedTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM link_track_playlist rltp, track t
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            ORDER BY ts_updated DESC
        </sql>
    </statement>

    <statement name="findMostPlayedTracksRestricted">
        <sql>
            SELECT LIMIT 0 :maxCount {trackColumns}
            FROM link_track_playlist rltp, track t
            WHERE :sourcePlaylistId IS NULL OR EXISTS (SELECT * FROM
                link_track_playlist ltp WHERE ltp.track_id = t.id AND ltp.playlist_id = :sourcePlaylistId)
            AND rltp.playlist_id = :restrictedPlaylistId AND t.id = rltp.track_id
            ORDER BY playcount DESC
        </sql>
    </statement>

    <statement name="findAlbumImage">
        <sql>
            SELECT LIMIT 0 1 data AS data
            FROM image i, track t
            WHERE t.album = :album
            AND i.hash = t.image_hash
            AND i.size = :size
        </sql>
    </statement>

    <statement name="nextPlaylistId">
        <sql>SELECT TOP 1 NEXT VALUE FOR playlist_id_sequence AS id FROM system_information</sql>
    </statement>

    <statement name="nextSearchId">
        <sql>SELECT TOP 1 NEXT VALUE FOR search_id_sequence AS id FROM system_information</sql>
    </statement>

    <statement name="tuneDatabase">
        <sql>ANALYZE SAMPLE_SIZE 0</sql>
    </statement>

    <statement name="createSearchTempTables">
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS temp_lucene_tracks (
                track_id VARCHAR(100),
                UNIQUE(track_id)
            )
        </sql>
        <sql>TRUNCATE TABLE temp_lucene_tracks</sql>
        <sql>
            CREATE TEMPORARY TABLE IF NOT EXISTS temp_like_tracks (
                track_id VARCHAR(100),
                UNIQUE(track_id)
            )
        </sql>
        <sql>TRUNCATE TABLE temp_like_tracks</sql>
    </statement>

    <!-- reusable sql fragments -->

    <fragment name="likeEscape">ESCAPE '\'</fragment>

</statements>