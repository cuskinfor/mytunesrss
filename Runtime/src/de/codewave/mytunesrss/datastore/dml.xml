<?xml version="1.0" encoding="UTF-8"?>

<statements>
    <statement name="findAlbums">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, artist_count AS artist_count, artist AS artist
            FROM album
            WHERE (:artist IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:artist IS NOT NULL AND name IN (SELECT DISTINCT(album) FROM track WHERE artist = :artist))
            OR (:genre IS NOT NULL AND name IN (SELECT DISTINCT(album) FROM track WHERE genre = :genre))
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findArtists">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, album_count AS album_count
            FROM artist
            WHERE (:album IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:album IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE album = :album))
            OR (:genre IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE genre = :genre))
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findGenres">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, artist_count AS artist_count, album_count AS album_count
            FROM genre
            WHERE (:index < 0 OR :index > 8)
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylists">
        <sql>
            <![CDATA[
            SELECT id AS id, name AS name, type AS type, track_count AS track_count
            FROM playlist
            WHERE (:type IS NULL AND :id IS NULL AND track_count > 0)
            OR (:type IS NOT NULL AND track_count > 0 AND type = :type)
            OR (:id IS NOT NULL AND id = :id)
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByIndex">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT ltp.index AS index, {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.index <= :lastIndex)
            ORDER BY index
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByAlbum">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.index <= :lastIndex)
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByArtist">
        <default name="firstIndex" value="-1" type="java.lang.Integer"/>
        <default name="lastIndex" value="-1" type="java.lang.Integer"/>
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex = -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex = -1 OR ltp.index <= :lastIndex)
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByAlbum">
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM track t
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findAllTracksOrderedByArtist">
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM track t
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findTracks">
      <sql>
        {findTracksQuery}
        ORDER BY album, track_number, name
      </sql>
    </statement>

    <statement name="findTracksWithArtistOrder">
      <sql>
        {findTracksQuery}
        ORDER BY artist, album, track_number, name
      </sql>
    </statement>

    <statement name="insertPagerPage">
        <sql>
            INSERT INTO pager (type, index, condition, value, content_count)
            VALUES (:type, :index, :condition, :value, :count)
        </sql>
    </statement>

    <statement name="deletePlaylistById">
        <sql>
            DELETE FROM playlist WHERE id = :id
        </sql>
    </statement>

    <statement name="deleteTrackById">
        <sql>
            DELETE FROM track WHERE id = :id
        </sql>
    </statement>

    <statement name="findAlbumArtistMapping">
        <sql>
            SELECT album AS album, artist AS artist FROM track
        </sql>
    </statement>

    <statement name="findTrackIdsForSource">
        <sql>
            SELECT id AS id FROM track WHERE source = :source
        </sql>
    </statement>

    <statement name="getSystemInformation">
        <sql>
            SELECT lastupdate AS lastupdate, version AS version, itunes_library_id AS itunes_library_id FROM system_information
        </sql>
    </statement>

    <statement name="initializeAllTables">
        <sql>INSERT INTO system_information (version) VALUES (:version)</sql>
    </statement>

    <statement name="deleteAllContent">
        <sql>DELETE FROM playlist</sql>
        <sql>DELETE FROM album</sql>
        <sql>DELETE FROM artist</sql>
        <sql>DELETE FROM track</sql>
        <sql>DELETE FROM pager</sql>
    </statement>

    <statement name="insertTrack">
        <sql>
            INSERT INTO track (id, name, artist, album, time, track_number, file, protected, video, source, genre, suffix)
            VALUES (:id, :name, :artist, :album, :time, :track_number, :file, :protected, :video, :source, :genre, :suffix)
        </sql>
    </statement>

    <statement name="updateTrack">
        <sql>
            UPDATE track SET name = :name, album = :album, artist = :artist, time = :time, track_number = :track_number,
                             file = :file, protected = :protected, video = :video, genre = :genre, suffix = :suffix
            WHERE id = :id
        </sql>
    </statement>

    <statement name="prepareForUpdate">
        <sql>DELETE FROM playlist WHERE type IN (:itunes, :m3ufile)</sql>
        <sql>DELETE FROM album</sql>
        <sql>DELETE FROM artist</sql>
        <sql>DELETE FROM genre</sql>
        <sql>DELETE FROM pager</sql>
    </statement>

    <statement name="insertPlaylist">
        <sql>INSERT INTO playlist (id, name, type, track_count) VALUES (:id, :name, :type, 0)</sql>
        <sql loop="track_id">{createPlaylistTrackLinks}</sql>
        <sql>{updatePlaylistCount}</sql>
    </statement>

    <statement name="updatePlaylist">
        <sql>UPDATE playlist SET name = :name WHERE id = :id</sql>
        <sql>DELETE FROM link_track_playlist WHERE playlist_id = :id</sql>
        <sql loop="track_id">{createPlaylistTrackLinks}</sql>
        <sql>{updatePlaylistCount}</sql>
    </statement>

    <statement name="updateHelpTables">
        <sql>
            INSERT INTO album (name, first_char, track_count, artist_count)
            SELECT DISTINCT(album), LOWER(SUBSTRING(album FROM 1 FOR 1)), COUNT(id), COUNT(DISTINCT(artist)) FROM track GROUP BY album
        </sql>
        <sql>
            INSERT INTO artist (name, first_char, track_count, album_count)
            SELECT DISTINCT(artist), LOWER(SUBSTRING(artist FROM 1 FOR 1)), COUNT(id), COUNT(DISTINCT(album)) FROM track GROUP BY artist
        </sql>
        <sql loop="mapping">UPDATE album SET artist = :loopitem_mapping_value WHERE name = :loopitem_mapping_key</sql>
        <sql>
            INSERT INTO genre (name, first_char, track_count, album_count, artist_count)
            SELECT DISTINCT(genre), LOWER(SUBSTRING(genre FROM 1 FOR 1)), COUNT(id), COUNT(DISTINCT(album)), COUNT(DISTINCT(artist))
            FROM track WHERE genre IS NOT NULL GROUP BY genre
        </sql>
        <sql>{tuneDatabaseAfterHelpTablesUpdate}</sql>
    </statement>

    <!-- reusable sql fragments -->
    <fragment name="letterRegionByIndex">
        <![CDATA[
        (:index = 0 AND (first_char < 'a' OR first_char > 'z'))
        OR (:index = 1 AND first_char >= 'a' AND first_char < 'd')
        OR (:index = 2 AND first_char >= 'd' AND first_char < 'g')
        OR (:index = 3 AND first_char >= 'g' AND first_char < 'j')
        OR (:index = 4 AND first_char >= 'j' AND first_char < 'm')
        OR (:index = 5 AND first_char >= 'm' AND first_char < 'p')
        OR (:index = 6 AND first_char >= 'p' AND first_char < 't')
        OR (:index = 7 AND first_char >= 't' AND first_char < 'w')
        OR (:index = 8 AND first_char >= 'w' AND first_char <= 'z')
        ]]>
    </fragment>

    <fragment name="trackColumns">
        t.id AS id, t.name AS name, t.artist AS artist, t.album AS album, t.time AS time, t.track_number AS track_number, t.file AS file,
        t.protected AS protected, t.video AS video, t.genre AS genre
    </fragment>

    <fragment name="updatePlaylistCount">
        UPDATE playlist
        SET track_count = SELECT COUNT(*) FROM link_track_playlist WHERE playlist_id = :id
        WHERE id = :id
    </fragment>

    <fragment name="createPlaylistTrackLinks">
        INSERT INTO link_track_playlist (index, playlist_id, track_id) VALUES (:loopindex_track_id, :id, :loopitem_track_id)
    </fragment>

    <fragment name="findTracksQuery">
        SELECT {trackColumns}
        FROM track t
        WHERE (:size_id = 0 OR t.id IN (:id[]))
        AND (:size_genre = 0 OR t.genre IN (:genre[]))
        AND (:size_artist = 0 OR t.artist IN (:artist[]))
        AND (:size_album = 0 OR t.album IN (:album[]))
        AND (:search[0] IS NULL OR (LOWER(t.name) LIKE :search[0] ESCAPE '\') OR (LCASE(album) LIKE :search[0] ESCAPE '\') OR (LCASE(artist) LIKE :search[0] ESCAPE '\'))
        AND (:search[1] IS NULL OR (LCASE(t.name) LIKE :search[1] ESCAPE '\') OR (LCASE(album) LIKE :search[1] ESCAPE '\') OR (LCASE(artist) LIKE :search[1] ESCAPE '\'))
        AND (:search[2] IS NULL OR (LOWER(t.name) LIKE :search[2] ESCAPE '\') OR (LOWER(album) LIKE :search[2] ESCAPE '\') OR (LOWER(artist) LIKE :search[2] ESCAPE '\'))
        AND (:search[3] IS NULL OR (LOWER(t.name) LIKE :search[3] ESCAPE '\') OR (LOWER(album) LIKE :search[3] ESCAPE '\') OR (LOWER(artist) LIKE :search[3] ESCAPE '\'))
        AND (:search[4] IS NULL OR (LOWER(t.name) LIKE :search[4] ESCAPE '\') OR (LOWER(album) LIKE :search[4] ESCAPE '\') OR (LOWER(artist) LIKE :search[4] ESCAPE '\'))
        AND (:search[5] IS NULL OR (LOWER(t.name) LIKE :search[5] ESCAPE '\') OR (LOWER(album) LIKE :search[5] ESCAPE '\') OR (LOWER(artist) LIKE :search[5] ESCAPE '\'))
        AND (:search[6] IS NULL OR (LOWER(t.name) LIKE :search[6] ESCAPE '\') OR (LOWER(album) LIKE :search[6] ESCAPE '\') OR (LOWER(artist) LIKE :search[6] ESCAPE '\'))
        AND (:search[7] IS NULL OR (LOWER(t.name) LIKE :search[7] ESCAPE '\') OR (LOWER(album) LIKE :search[7] ESCAPE '\') OR (LOWER(artist) LIKE :search[7] ESCAPE '\'))
        AND (:search[8] IS NULL OR (LOWER(t.name) LIKE :search[8] ESCAPE '\') OR (LOWER(album) LIKE :search[8] ESCAPE '\') OR (LOWER(artist) LIKE :search[8] ESCAPE '\'))
        AND (:search[9] IS NULL OR (LOWER(t.name) LIKE :search[9] ESCAPE '\') OR (LOWER(album) LIKE :search[9] ESCAPE '\') OR (LOWER(artist) LIKE :search[9] ESCAPE '\'))
    </fragment>

</statements>