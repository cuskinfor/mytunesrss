<?xml version="1.0" encoding="UTF-8"?>

<statements>
    <statement name="findAlbums">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, artist_count AS artist_count, artist AS artist
            FROM album
            WHERE (:artist IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:artist IS NOT NULL AND name IN (SELECT DISTINCT(album) FROM track WHERE artist = :artist))
            OR (:genre IS NOT NULL AND name IN (SELECT DISTINCT(album) FROM track WHERE genre = :genre))
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findArtists">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, album_count AS album_count
            FROM artist
            WHERE (:album IS NULL AND :genre IS NULL AND (:index < 0 OR :index > 8))
            OR (:album IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE album = :album))
            OR (:genre IS NOT NULL AND name IN (SELECT DISTINCT(artist) FROM track WHERE genre = :genre))
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findGenres">
        <sql>
            <![CDATA[
            SELECT name AS name, track_count AS track_count, artist_count AS artist_count, album_count AS album_count
            FROM genre
            WHERE (:index < 0 OR :index > 8)
            OR {letterRegionByIndex}
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylists">
        <sql>
            <![CDATA[
            SELECT id AS id, name AS name, type AS type, track_count AS track_count
            FROM playlist
            WHERE (:type IS NULL AND :id IS NULL AND track_count > 0)
            OR (:type IS NOT NULL AND track_count > 0 AND type = :type)
            OR (:id IS NOT NULL AND id = :id)
            ORDER BY name
            ]]>
        </sql>
    </statement>

    <statement name="findRandomTracks">
        <sql>
            SELECT LIMIT 0 :maxCount RAND() AS rnd, {trackColumns} FROM track t ORDER BY rnd
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByIndex">
        <sql>
            <![CDATA[
            SELECT ltp.index AS index, {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE t.id = ltp.track_id
            AND ltp.playlist_id = :id
            AND (:firstIndex == -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex == -1 OR ltp.index <= :lastIndex)
            ORDER BY index
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByAlbum">
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE (:id IS NULL OR (t.id = ltp.track_id AND ltp.playlist_id = :id))
            AND (:firstIndex == -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex == -1 OR ltp.index <= :lastIndex)
            ORDER BY album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="findPlaylistTracksOrderedByArtist">
        <sql>
            <![CDATA[
            SELECT {trackColumns}
            FROM link_track_playlist ltp, track t
            WHERE (:id IS NULL OR (t.id = ltp.track_id AND ltp.playlist_id = :id))
            AND (:firstIndex == -1 OR ltp.index >= :firstIndex)
            AND (:lastIndex == -1 OR ltp.index <= :lastIndex)
            ORDER BY artist, album, track_number, name
            ]]>
        </sql>
    </statement>

    <statement name="insertPagerPage">
        <sql>
            INSERT INTO pager (type, index, condition, value, content_count)
            VALUES (:type, :index, :condition, :value, :count)
        </sql>
    </statement>

    <statement name="deletePlaylistById">
        <sql>
            DELETE FROM playlist WHERE id = :id
        </sql>
    </statement>

    <statement name="deleteTrackById">
        <sql>
            DELETE FROM track WHERE id = :id
        </sql>
    </statement>

    <statement name="findAlbumArtistMapping">
        <sql>
            SELECT album AS album, artist AS artist FROM track
        </sql>
    </statement>

    <!-- reusable sql fragments -->
    <fragment name="letterRegionByIndex">
        <![CDATA[
        (:index = 0 AND (first_char < 'a' OR first_char > 'z'))
        OR (:index = 1 AND first_char >= 'a' AND first_char < 'd')
        OR (:index = 2 AND first_char >= 'd' AND first_char < 'g')
        OR (:index = 3 AND first_char >= 'g' AND first_char < 'j')
        OR (:index = 4 AND first_char >= 'j' AND first_char < 'm')
        OR (:index = 5 AND first_char >= 'm' AND first_char < 'p')
        OR (:index = 6 AND first_char >= 'p' AND first_char < 't')
        OR (:index = 7 AND first_char >= 't' AND first_char < 'w')
        OR (:index = 8 AND first_char >= 'w' AND first_char <= 'z')
        ]]>
    </fragment>

    <fragment name="trackColumns">
      t.id AS id, t.name AS name, t.artist AS artist, t.album AS album, t.time AS time, t.track_number AS track_number, t.file AS file,
      t.protected AS protected, t.video AS video, t.genre AS genre
    </fragment>
</statements>